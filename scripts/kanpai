#!/usr/bin/env python
# -*- coding: utf-8 -*-

import pandas as pd

import click
from colorama import Fore, Style

import os
import sys

from scripts.cwd_context import (ensure_cwd_not_within_git_repo,
                                 ensure_project_does_not_exist,
                                 ensure_project_does_not_conflict,
                                 create_project_from_template,
                                 init_git_repo,
                                 replace_package_tokens,
                                 replace_package_slug,
                                 commit_git_repo,
                                 is_cwd_within_generated_project,
                                 get_generated_project_top_level)


@click.group()
def greet():
    """
    command group
    """
    pass


@greet.command(help="creates a data science project boilerplate")
@click.argument("package_name")
def new(package_name):
    """
    fetches data csv ressource url and stores it locally for further processing
    """

    # make sure that we are not in a git repo
    ensure_cwd_not_within_git_repo()

    # checking whether project already exists
    ensure_project_does_not_exist(package_name)

    # locating package template
    package_path = os.path.dirname(os.path.dirname(__file__))
    template_path = os.path.join(package_path, "canai", "templates", "pred")

    # retrieving package content
    ensure_project_does_not_conflict(package_name, template_path)

    # create project from template
    create_project_from_template(package_name, template_path)

    # init git repo
    init_git_repo(package_name)

    # replace tokens in all files
    replace_package_tokens(package_name)

    # replace package slug
    replace_package_slug(package_name)

    # init git repo
    commit_git_repo(package_name)

    print(Fore.GREEN + "Project %s successfully created! üéâ üç∞" % package_name)


@greet.command(help="fetches data from a csv ressource, "
               "defaults to the taxifare csv")
@click.argument("data", default="taxifare")
@click.option("--nrows", "-n", "nrows", default=1_000,
              help="number of rows to retrieve, -1 to retrieve all")
def fetch(data, nrows):
    """
    fetches data csv ressource url and stores it locally for further processing
    """

    # check context: within project or within
    is_kanpai = is_cwd_within_generated_project(True)

    if not is_kanpai:
        exit(1)

    # checking data parameter
    if data == "taxifare":
        data = "s3://wagon-public-datasets/taxi-fare-train.csv"

    # fetching data
    print(Fore.GREEN + "Fetching %s lines from %s data üöÄ"
          % (nrows, data)
          + Style.RESET_ALL)

    df = pd.read_csv(data, nrows=nrows)

    # saving data locally
    project_root = get_generated_project_top_level()
    data_path = os.path.join(project_root, "data", "data.csv")
    df.to_csv(data_path)

    print(Fore.GREEN + "Data saved to %s üëç"
          % data_path
          + Style.RESET_ALL)


# @greet.command()
# @click.option("--in", "-i", "in_file", required=True,
#               help="Path to csv file to be processed.",
#               type=click.Path(exists=True, dir_okay=False, readable=True))
# @click.option("--out-file", "-o", default="./output.xlsx",
#               help="Path to excel file to store the result.")
# @click.option('--verbose', is_flag=True, help="Verbose output")
# @click.option(
#     "--dev", "server_url", help="Upload to dev server",
#     flag_value='https://dev.server.org/api/v2/upload',
# )
# @click.option(
#     "--test", "server_url", help="Upload to test server",
#     flag_value='https://test.server.com/api/v2/upload',
# )
# @click.option(
#     "--prod", "server_url", help="Upload to prod server",
#     flag_value='https://real.server.com/api/v2/upload',
#     default=True
# )
# def process(in_file, out_file, server_url):
#     """ Processes the input file IN and stores the result to
#     output file OUT.
#     """

#     print(Fore.GREEN + 'ok')


if __name__ == "__main__":
    greet()
