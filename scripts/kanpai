#!/usr/bin/env python
# -*- coding: utf-8 -*-

import pandas as pd

import click
from colorama import Fore, Style

import os

from scripts.project_factory import ProjectFactory

from scripts.project_context import (is_cwd_within_generated_project,
                                     get_generated_project_top_level)


def get_data_path():
    project_root = get_generated_project_top_level()
    data_path = os.path.join(project_root, "data", "data.csv")
    return data_path


@click.group()
def greet():
    """
    command group
    """
    pass


@greet.command(help="creates a data science project boilerplate")
@click.argument("package_name")
def new(package_name):
    """
    fetches data csv ressource url and stores it locally for further processing
    """

    # locating package template
    package_path = os.path.dirname(os.path.dirname(__file__))
    template_path = os.path.join(package_path, "canai", "templates", "pred")

    # creating project
    pf = ProjectFactory(package_name, template_path)
    pf.generate()


@greet.command(help="fetches data from a csv ressource, "
               "defaults to the taxifare csv")
@click.argument("data", default="taxifare")
@click.option("--nrows", "-n", "nrows", default=1_000,
              help="number of rows to retrieve, -1 to retrieve all")
def fetch(data, nrows):
    """
    fetches data csv ressource url and stores it locally for further processing
    """

    # check context: within project or within
    is_kanpai = is_cwd_within_generated_project(True)

    if not is_kanpai:
        exit(1)

    # checking data parameter
    if data == "taxifare":
        data = "s3://wagon-public-datasets/taxi-fare-train.csv"

    # fetching data
    print(Fore.GREEN + "Fetching %s lines from %s data üöÄ"
          % (nrows, data)
          + Style.RESET_ALL)

    df = pd.read_csv(data, nrows=nrows)

    # saving data locally
    data_path = get_data_path()
    df.to_csv(data_path)

    print(Fore.GREEN + "Data saved to %s üëç"
          % data_path
          + Style.RESET_ALL)


@greet.command(help="shows fetched data head")
@click.option("--nrows", "-n", "nrows", default=5,
              help="number of rows to retrieve, -1 to retrieve all")
def head(nrows):

    data_path = get_data_path()
    df = pd.read_csv(data_path, nrows=nrows)
    print(df.head(nrows))


if __name__ == "__main__":
    greet()
    new.add_command(fetch)
