#!/usr/bin/env python
# -*- coding: utf-8 -*-

import pandas as pd

import click
from colorama import Fore

import os


def is_cwd_within_generated_project(print_error_if_not_within=False):
    """
    checks whether the current working directory is a git repo
    that was generated using kanpai by verifying that the first commit
    contains the kanpai commit signature
    """

    # retrieving first commit of current working directory
    # git log --oneline returns one commit per line
    # 2>/dev/null eliminates errors but not the standard output,
    # which is read by os.popen
    # tail -1 retrieves the first commit of the git repo
    git_log_cmd = "git log --oneline 2>/dev/null " \
                  " | tail -1"

    git_first_commit = os.popen(git_log_cmd).read()

    # checking whether first commit was performed by kanpai
    # TODO: import from canai script or common file
    commit_signature = "kanpai üéâ üç∞"  # uniquelly identifies a kanpai project

    if commit_signature not in git_first_commit:
        if print_error_if_not_within:
            print(Fore.RED + "This command needs to be run "
                  "within a kanpai generated project... üòÖ")

        return False

    return True


def get_generated_project_top_level():
    """
    retrieves the top level of the generated kanpai project
    which corresponds to the top level of the git repository
    """

    # getting git repo top level
    get_root_cmd = "git rev-parse --show-toplevel"

    root_path = os.popen(get_root_cmd).read().strip()

    if root_path == "":
        print("error getting git repo top level: %s (%s)"
              % (root_path, get_root_cmd))

        exit(1)

    return root_path


@click.group()
def greet():
    """
    command group
    """
    pass


@greet.command(help="fetches data from a csv ressource, "
               "returns the taxifare csv if DATA is not specified")
@click.argument("data", default="taxifare")
@click.option("--nrows", "-n", "nrows", default=1_000,
              help="number of rows to retrieve, -1 to retrieve all")
def fetch(data, nrows):
    """
    fetches data csv ressource url and stores it locally for further processing
    """

    # check context: within project or within
    is_kanpai = is_cwd_within_generated_project(True)

    if not is_kanpai:
        exit(1)

    # checking data parameter
    if data == "taxifare":
        data = "s3://wagon-public-datasets/taxi-fare-train.csv"

    # fetching data
    df = pd.read_csv(data, nrows=nrows)

    # saving data locally
    project_root = get_generated_project_top_level()
    data_path = os.path.join(project_root, "data", "data.csv")
    df.to_csv(data_path)

    print(Fore.GREEN + "%s lines of %s data saved to %s"
          % (nrows, data, data_path))


@greet.command()
@click.option("--in", "-i", "in_file", required=True,
              help="Path to csv file to be processed.",
              type=click.Path(exists=True, dir_okay=False, readable=True))
@click.option("--out-file", "-o", default="./output.xlsx",
              help="Path to excel file to store the result.")
@click.option('--verbose', is_flag=True, help="Verbose output")
@click.option(
    "--dev", "server_url", help="Upload to dev server",
    flag_value='https://dev.server.org/api/v2/upload',
)
@click.option(
    "--test", "server_url", help="Upload to test server",
    flag_value='https://test.server.com/api/v2/upload',
)
@click.option(
    "--prod", "server_url", help="Upload to prod server",
    flag_value='https://real.server.com/api/v2/upload',
    default=True
)
def process(in_file, out_file, server_url):
    """ Processes the input file IN and stores the result to
    output file OUT.
    """

    print(Fore.GREEN + 'ok')


if __name__ == "__main__":
    greet()
