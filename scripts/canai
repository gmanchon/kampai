#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys

# make sure that we are not in a git repo
git_cmd = "git status &>/dev/null"

git_code = os.system(git_cmd)

if git_code == 0:
    cwd = os.getcwd()

    print("you are sitting in %s which appears to be part of "
          "a git repository" % cwd)
    print("this command cannot be run in a git repository")
    print("please change your working directory before running this command")

    exit(1)

# retrieving package content
package_path = os.path.dirname(os.path.dirname(__file__))
template_path = os.path.join(package_path, "canai", "templates", "pred")

# validate command parameters
if len(sys.argv) != 3 or sys.argv[1] != "new":
    script = os.path.basename(sys.argv[0])

    print("usage: %s new PACKAGE" % script)

    exit(1)

# checking whether project already exists
package_name = sys.argv[2]

if os.path.isfile(package_name) or os.path.isdir(package_name):
    print("target project %s already exists" % package_name)

    exit(1)

# create project from template
copy_cmd = "cp -R %s %s" % (template_path, package_name)

copy_code = os.system(copy_cmd)

if copy_code != 0:
    print("error creating project: %s (%s)" % (copy_code, copy_cmd))

    exit(1)

# init git repo
git_init_cmd = "cd %s " \
               " && git init &>/dev/null " \
               " && git add . " \
               " && git commit -m 'initial commit' &>/dev/null" % package_name

git_init_code = os.system(git_init_cmd)

if git_init_code != 0:
    print("error initializing git repo: %s" % git_init_code)

    exit(1)

# replace tokens in all files
replacements = dict(
    CANAI_PACKAGE_NAME='package name',
    CANAI_PACKAGE_DESCRIPTION='package description',
    CANAI_PACKAGE_SCRIPT='package script name')

for key, value in replacements.items():

    replace_cmd = "cd %s " \
                  " && find . -type f " \
                  " | grep -v git " \
                  " | xargs sed -i '' 's/%s/%s/g' " \
                  "" % (package_name, key, value)

    replace_code = os.system(replace_cmd)

    if replace_code != 0:
        print("error replacing tokens: %s (%s)" % (replace_code, replace_cmd))

        exit(1)

# init git repo
git_init_cmd = "cd %s " \
               " && git add . " \
               " && git commit -m 'replaced tokens' &>/dev/null " \
               "" % package_name

git_init_code = os.system(git_init_cmd)

if git_init_code != 0:
    print("error initializing git repo: %s" % git_init_code)

    exit(1)

print("project %s created!" % package_name)
