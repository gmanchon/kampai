#!/usr/bin/env python
# -*- coding: utf-8 -*-

# this could have probably been written in shell script instead of python...
# this need to be refactored and clarified

from colorama import Fore, Style

import os
import sys

# make sure that we are not in a git repo
git_cmd = "git status &>/dev/null"

git_code = os.system(git_cmd)

if git_code == 0:
    cwd = os.getcwd()

    print(Fore.RED + "This appears to be a git repository 😵" + Style.RESET_ALL)
    print("This command is going to create a git repository of its own "
          "and cannot be run in a git repository")
    print("Current working directory is %s " % cwd)
    print("Please change working directory before running this command 🙏")

    exit(1)

# retrieving package content
package_path = os.path.dirname(os.path.dirname(__file__))
template_path = os.path.join(package_path, "canai", "templates", "pred")

# validate command parameters
if len(sys.argv) != 3 or sys.argv[1] != "new":
    script = os.path.basename(sys.argv[0])

    print("Usage: %s new PACKAGE" % script)
    print("")
    print("  creates a new Data Science project boilerplate")

    exit(1)

# checking whether project already exists
package_name = sys.argv[2]

if os.path.isfile(package_name) or os.path.isdir(package_name):
    print(Fore.RED + "Target location %s already exists 😨" % package_name
          + Style.RESET_ALL)
    print("Please use another project name 🙏")

    exit(1)

# create project from template
copy_cmd = "cp -R %s %s" % (template_path, package_name)

copy_code = os.system(copy_cmd)

if copy_code != 0:
    print(Fore.RED + "Error creating project: %s (%s) 😭"
          % (copy_code, copy_cmd)
          + Style.RESET_ALL)

    exit(1)

# init git repo
commit_signature = "kanpai 🎉 🍰"  # uniquelly identifies a kanpai project

git_init_cmd = "cd %s " \
               " && git init &>/dev/null " \
               " && git add . " \
               " && git commit -m 'initial commit by %s' &>/dev/null" \
               % (package_name, commit_signature)

git_init_code = os.system(git_init_cmd)

if git_init_code != 0:
    print(Fore.RED + "Error initializing git repo: %s 🥺" % git_init_code
          + Style.RESET_ALL)

    exit(1)

# replace tokens in all files
replacements = dict(
    CANAI_PACKAGE_NAME=package_name,
    CANAI_PACKAGE_DESCRIPTION='Package description',
    CANAI_PACKAGE_SCRIPT='package_script_name')

for key, value in replacements.items():

    # find . -type f recursively finds all files (only files)
    # grep -v git ignores files matching the pattern git
    # xargs converts the list of files into parameters for sed
    # sed -i '' 's/a/b/g' replaces the pattern a by b in the files
    replace_cmd = "cd %s " \
                  " && find . -type f " \
                  " | grep -v git " \
                  " | xargs sed -i '' 's/%s/%s/g' " \
                  % (package_name, key, value)

    replace_code = os.system(replace_cmd)

    if replace_code != 0:
        print(Fore.RED + "Error replacing tokens: %s (%s) 😳"
              % (replace_code, replace_cmd)
              + Style.RESET_ALL)

        exit(1)

# replace package slug
dir_replacements = dict(
    CANAI_PACKAGE_SLUG=package_name)

for key, value in dir_replacements.items():

    dir_replace_cmd = "cd %s " \
                      " && mv %s %s" % (package_name, key, value)

    dir_replace_code = os.system(dir_replace_cmd)

    if dir_replace_code != 0:
        print(Fore.RED + "Error replacing dir tokens: %s (%s) 😢"
              % (dir_replace_code, dir_replace_cmd)
              + Style.RESET_ALL)

        exit(1)

# init git repo
git_init_cmd = "cd %s " \
               " && git add . " \
               " && git commit -m 'replaced tokens' &>/dev/null " \
               % package_name

git_init_code = os.system(git_init_cmd)

if git_init_code != 0:
    print(Fore.RED + "Error initializing git repo: %s 😞" % git_init_code
          + Style.RESET_ALL)

    exit(1)

print(Fore.GREEN + "Project %s successfully created! 🎉 🍰" % package_name)
