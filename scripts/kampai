#!/usr/bin/env python
# -*- coding: utf-8 -*-

from kampai.project_clone import ProjectClone
from kampai.project_factory import ProjectFactory
from kampai.project_context import (is_cwd_within_generated_project,
                                    get_generated_project_top_level,
                                    get_install_path,
                                    get_package_name)

import numpy as np
import pandas as pd
from sklearn.datasets import load_iris

import click
from colorama import Fore, Style

import sys
import os


def get_data_path():
    project_root = get_generated_project_top_level()
    data_path = os.path.join(project_root, "data", "data.csv")
    return data_path


def assert_within_project():
    is_kampai = is_cwd_within_generated_project(True)

    if not is_kampai:
        exit(1)


@click.group()
def greet():
    """
    command group
    """
    pass


@greet.command(help="create a package boilerplate")
@click.argument("package_name")
@click.argument("source", default="default")
def new(package_name, source):
    """
    fetches data csv ressource url and stores it locally for further processing
    """

    # building destination path
    project_path = os.path.join(os.getcwd(), package_name)

    # checking source parameter
    if source == "default":

        # locating package template (source path)
        package_path = get_install_path()
        template_path = os.path.join(package_path, "templates", "pred")

        # creating project using kampai default package
        pf = ProjectFactory(package_name, project_path, template_path)
        pf.generate()

    else:

        # cloning source
        project_clone = ProjectClone(source)

        # creating project
        if not project_clone.is_valid:

            return

        # building source path
        clone_name, commit_hash, remote_url = project_clone.get_clone_params()
        template_path = os.path.join(os.getcwd(), clone_name)

        print(Fore.GREEN + "\nCreating project... ü¶ú"
              + Style.RESET_ALL
              + "\nFrom %s to %s"
              % (clone_name, project_path))

        # TODO replace KAMPAI_ placeholders / replacements

        # TODO handle forbidden project names in template using curl

        package_slug = project_clone.get_template_package_slug(template_path)

        # check if kampai template is valid
        if package_slug is None:

            print(Fore.RED + "\n‚ö†Ô∏è  Provided remote is not a kampai "
                  + "repository: %s üò¢"
                  % source
                  + Style.RESET_ALL)

            # remove temporary directory
            project_clone.remove_temporary_directory()

            return

        # TODO package slug must be a valid dir name

        pf = ProjectFactory(package_name, project_path, template_path,
                            replacements={}, package_slug=package_slug,
                            template_remote_url=remote_url,
                            template_commit_hash=commit_hash)
        pf.generate()

        # remove temporary directory
        project_clone.remove_temporary_directory()


@greet.command(help="generate gist code boilerplate")
@click.argument("gist", type=click.Choice(
    ["make", "script", "test", "ci"],
    case_sensitive=False))
def gen(gist):
    """
    generates gist code boilerplate in project
    """

    assert_within_project()

    # building destination path
    package_name = get_package_name()
    project_root = get_generated_project_top_level()

    # locating gist code boilerplate (source path)
    package_path = get_install_path()
    template_path = os.path.join(package_path, "gists", gist)

    # creating gist code boilerplate
    pf = ProjectFactory(package_name, project_root, template_path)
    pf.generate_gist()


# @greet.command(help="fetch data from a csv ressource, "
#                "defaults to the taxifare csv")
# @click.argument("data", default="taxifare")
# @click.option("--nrows", "-n", "nrows", default=1_000,
#               help="number of rows to retrieve, -1 to retrieve all")
def fetch(data, nrows):
    """
    fetches data csv ressource url and stores it locally for further processing
    """

    assert_within_project()

    # checking data parameter
    if data == "iris":

        # fetching data
        iris = load_iris()
        df = pd.DataFrame(data=np.c_[iris.data, iris.target],
                          columns=iris.feature_names + ['target']) \
               .head(nrows)

    else:

        if data == "taxifare":
            data = "s3://wagon-public-datasets/taxi-fare-train.csv"

        # fetching data
        print(Fore.GREEN + "Fetching %s lines from %s data üöÄ"
              % (nrows, data)
              + Style.RESET_ALL)

        df = pd.read_csv(data, nrows=nrows)

    # saving data locally
    data_path = get_data_path()
    df.to_csv(data_path)

    print(Fore.GREEN + "Data saved to %s üëç"
          % data_path
          + Style.RESET_ALL)


# @greet.command(help="show fetched data head")
# @click.option("--nrows", "-n", "nrows", default=5,
#               help="number of rows to retrieve, -1 to retrieve all")
def head(nrows):
    """
    shows head of fetched dataset
    """

    assert_within_project()

    # show head
    data_path = get_data_path()
    df = pd.read_csv(data_path, nrows=nrows)
    print(df.head(nrows))


# @greet.command(help="install package")
# def install():
#     """
#     installs package
#     """

#     assert_within_project()

#     # install package
#     pip_install_cmd = "pip install ."

#     pip_code = os.system(pip_install_cmd)

#     if pip_code != 0:
#         print(Fore.RED + "Error installing package: %s (%s) üò¢"
#               % (pip_code, pip_install_cmd)
#               + Style.RESET_ALL)

#         exit(1)

#     print(Fore.GREEN + "Package installed! üëç"
#           + Style.RESET_ALL)


# @greet.command(help="train model")
def train():
    """
    trains models
    """

    assert_within_project()

    print("Loading trainer...")

    # get project package name
    package_name = get_package_name()
    project_root = get_generated_project_top_level()

    # update path in case the command is not called from the project root
    # https://stackoverflow.com/questions/4383571/importing-files-from-different-folder
    sys.path.insert(1, project_root)

    # loading trainer code
    # https://stackoverflow.com/questions/547829/how-to-dynamically-load-a-python-class
    mod = __import__("%s.trainer" % package_name, fromlist=['Trainer'])
    trainer_class = getattr(mod, 'Trainer')

    # instanciating trainer
    trainer = trainer_class()

    print("Training model...")

    # running trainer
    rmse = trainer.train()

    print(Fore.GREEN + "Model trained, rmse: %s üëç"
          % rmse
          + Style.RESET_ALL)


if __name__ == "__main__":
    greet()
    new.add_command(fetch)
